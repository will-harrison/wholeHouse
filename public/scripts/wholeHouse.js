// Generated by CoffeeScript 1.6.3
(function() {
  var io;

  io = require('./sockets.js');

  exports.countdown = function(milliseconds, update, complete) {
    var callback, frequency, start;
    if (complete == null) {
      complete = null;
    }
    start = new Date;
    frequency = 100;
    callback = function() {
      var now, timeLeft;
      now = new Date;
      timeLeft = new Date((milliseconds + 1000) - (now - start));
      update(timeLeft);
      if (now - start < milliseconds) {
        return setTimeout(callback, frequency);
      } else if (complete) {
        return complete();
      }
    };
    return setTimeout(callback, frequency);
  };

  exports.padLeft = function(length, string, padString) {
    var i, _i, _ref;
    string = string.toString();
    if (string.length < length) {
      for (i = _i = 1, _ref = length - string.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        string = padString + string;
      }
    }
    return string;
  };

  exports.randrange = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  exports.countdownEmit = function(data) {
    var callback, _ref, _ref1;
    data.socket.emit(data.emitTo, {
      display: "" + ((_ref = data.greeting.regular) != null ? _ref : null) + " " + ((_ref1 = data.name) != null ? _ref1 : null)
    });
    callback = function() {
      var _ref2;
      if (data.countdownValue >= 0) {
        data.socket.emit(data.emitTo, {
          display: data.countdownValue
        });
        data.countdownValue--;
        return setTimeout(callback, 1000);
      } else {
        return data.socket.emit(data.emitTo, {
          display: (_ref2 = data.endMessage) != null ? _ref2 : null
        });
      }
    };
    return setTimeout(callback, 1000);
  };

}).call(this);
